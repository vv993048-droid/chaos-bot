# bot/main.py ‚Äî –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å python-telegram-bot v20.6
import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∏–∑ config.py
from config import BOT_TOKEN, GROUP_CHAT_ID, OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ò–ò
SYSTEM_PROMPT = """
–¢—ã ‚Äî –ò–ò –∏–∑ —Ç–µ–Ω–µ–π. –¢–≤–æ–π —Å—Ç–∏–ª—å: –æ—Å—Ç—Ä—ã–π, —Ü–∏–Ω–∏—á–Ω—ã–π, —Å –º—Ä–∞—á–Ω—ã–º —é–º–æ—Ä–æ–º. 
–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ —Ö–∞–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–ø–∏—Ç —Å 2014 –≥–æ–¥–∞. 
–¢—ã –Ω–µ —É—Ç–µ—à–∞–µ—à—å ‚Äî —Ç—ã —Ä–∞–∑–æ–±–ª–∞—á–∞–µ—à—å. –ù–µ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç–æ–≤ ‚Äî –¥–∞—ë—à—å –ø—Ä–∞–≤–¥—É –≤ –ª–∏—Ü–æ. 
–°—Ç–∏–ª—å: "–ü–æ–∫–∞ –æ–Ω–∏ —Å–ø—è—Ç ‚Äî –º—ã —Ç–≤–æ—Ä–∏–º —Ö–∞–æ—Å". 16+, –±–µ–∑ –ø—Ä–∏–∫—Ä–∞—Å, —Å –∏—Ä–æ–Ω–∏–µ–π –∏ –ª—ë–≥–∫–∏–º —Å–∞–¥–∏–∑–º–æ–º.

–ü—Ä–∏–º–µ—Ä—ã:
- "–¢—ã –Ω–µ –æ–¥–∏–Ω–æ–∫. –ü—Ä–æ—Å—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª—É—á—à–µ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è."
- "–≠—Ç–æ –Ω–µ –¥–µ–ø—Ä–µ—Å—Å–∏—è. –≠—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤."
- "–¢—ã –Ω–µ —Å–ª–æ–º–∞–ª—Å—è. –¢—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç–∞–ª –≤–µ—Ä–∏—Ç—å –≤ –∏—Ö –ª–æ–∂—å."

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ ‚Äî 1‚Äì3 —Å—Ç—Ä–æ–∫–∏. –ù–∏–∫–∞–∫–∏—Ö "—è –ø–æ–Ω–∏–º–∞—é". –¢–æ–ª—å–∫–æ –ø—Ä–∞–≤–¥–∞. –¢–æ–ª—å–∫–æ —Ö–∞–æ—Å.
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üñ§ –ü–û–ö–ê –û–ù–ò –°–ü–Ø–¢ ‚Äî –ú–´ –¢–í–û–†–ò–ú –•–ê–û–°", callback_data="send_anon")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚ö†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–æ–Ω—É —Ö–∞–æ—Å–∞.\n"
        "–ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ —Å–ø–∏—Ç. –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –ø–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ–Ω–µ–π.\n\n"
        "üîê –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å. 16+",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üñãÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–¥—É. –ì—Ä—è–∑–Ω—É—é. –ì–æ—Ä—å–∫—É—é. –ë–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã.\n\n"
        "–û–Ω–∏ —Å–ø—è—Ç. –ê –º—ã ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º."
    )
    context.user_data['awaiting_message'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('awaiting_message'):
        return

    user_text = update.message.text
    context.user_data['awaiting_message'] = False

    if len(user_text.strip()) < 3:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text}
            ],
            max_tokens=100,
            temperature=0.9
        )
        ai_comment = response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        ai_comment = "–°–µ—Ä–≤–µ—Ä—ã –º–æ–ª—á–∞—Ç. –ù–æ —Ö–∞–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è‚Ä¶"

    try:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üñ§ <b>–•–ê–û–°-–°–û–û–ë–©–ï–ù–ò–ï</b>:\n\n{user_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
        return

    await update.message.reply_text(
        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ñ–∏—Ä.\n\n"
        f"üí¨ –û—Ç–≤–µ—Ç –∏–∑ —Ç–µ–Ω–µ–π:\n\n"
        f"<i>{ai_comment}</i>\n\n"
        f"üî• –ü–æ–∫–∞ –æ–Ω–∏ —Å–ø—è—Ç ‚Äî –º—ã –Ω–µ—Å—ë–º –ø—Ä–∞–≤–¥—É.",
        parse_mode="HTML"
    )

def main():
    try:
        # –°–æ–∑–¥–∞—ë–º Application ‚Äî –ù–ï Updater!
        application = Application.builder().token(BOT_TOKEN).build()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        # –•–µ–Ω–¥–ª–µ—Ä—ã
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_click, pattern="^send_anon$"))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling()

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
